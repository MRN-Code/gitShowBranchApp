{
  "name": "git-show-branch-parser",
  "version": "0.1.1",
  "description": "Parse output of `git show-branch` to a JS object",
  "main": "lib/parser.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dylancwood/gitShowBranchParser.git"
  },
  "keywords": [
    "git",
    "show-branch"
  ],
  "author": {
    "name": "Dylan Wood"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dylancwood/gitShowBranchParser/issues"
  },
  "homepage": "https://github.com/dylancwood/gitShowBranchParser",
  "dependencies": {
    "rsvp": "~3.0.9",
    "underscore": "~1.6.0"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.10.0"
  },
  "readme": "gitShowBranchParser\n===================\n\nParse output of `git show-branch` command into JS object. \n\nShow-branch prints a unique tabular format that indicates which recent\nare present in all of your branches. This output has been optimized for\nreading on the command line, and does not adapt well if you want to\ndisplay this information on a web page, or use it in an application. \n**git-show-branch-parser** will parse the output into a more usable\njavascript object.\n\n## Usage\n### Install\n```shell\nnpm install git-show-branch-parser\n```\n\n### Require\n```js\nvar showBranchParser = require('git-show-branch-parser');\n```\n\n### Parse!\n```js\nshowBranchParser('path/to/show-branch/output.txt', function (err, obj) {\n    console.log(JSON.stringify(obj, null, 4));\n});\n```\n### Or use promises:\nThis function returns an RSVP promise.\n```js\nvar sbpPromise = showBranchParser('path/to/show-branch/output.txt');\nsbpPromise.then(function (obj) {\n    console.log(JSON.stringify(obj, null, 4));\n}).catch(function (err) {\n    console.assert(false, err);\n});\n```\n\n## Object Structure:\nThe `git show-branch` output is parsed into an object of the following form:\n```\n{\n    branches: [\n        {\n            label: '...',\n            latestCommit: '...'\n        },\n        ...\n    ],\n    commits: [\n        {\n            label: '...',\n            commitMessage: '...',\n            branches: // order mimics that of the branches array above\n                [\n                    boolean, // true if commit is in corresponding branch\n                    boolean, // true if commit is in corresponding branch\n                    ...\n                ]\n        },\n        ...\n    ]\n}\n```\n\n## Details\nFor details about how to use `git show-branch`, refer to the documentation: \nhttps://www.kernel.org/pub/software/scm/git/docs/git-show-branch.html\n\nSuppose that we have three branches used in our build/release cycle:\n**master**, **release**, and **develop**. Before creating a release, it would\nbe useful to see which commits are in develop, but not in the release branch. \nSimilarly, before pushing the release to master, it would be useful to document\nwhich commits are going to me merged from master into release. \n\nThe command `git show-branch` is very useful for this. By running `git show-branch origin/master,\norigin/release, origin/develop`, we will get the following example output:\n```\n! [origin/master] update calendars on MICIS > REPORTS tab so that the sql queries will include the day specified.  This updates Billing Reports, Subject Enrollment, URSI Stats\n ! [origin/release] update asmt ref to develop from autoq\n  ! [origin/develop] update asmt ref to develop from autoq\n---\n  + [12679ba] update asmt ref to develop from autoq\n  - [36eb3f4] Merge pull request #90 from MRN-Code/auto_queue\n ++ [caf7e93] update asmt checksum.  Also, ORDER study list by study names, update wording in a message to user for readability, and remove extra onPageLoad function that was not being called, but if so, would create errors\n ++ [e5073e4] update error message function names\n ++ [cf62f75] added check for loginid on subj details\n--- [fc5b144] Merge branch 'auto_queue' of github.com:MRN-Code/micis into auto_queue\n```\n\nThe above output indicates that the first two commits are only present in **origin/develop**.\nThe next three commits are present in both **origin/develop**, and **orign/release**, and the\nlast commit is present in all three branches. \n\nBy writing the output from `git show-branch`, we can later parse it into a JavaScript object\nusing this utility:\n```js\nvar showBranchParser = require('git-show-branch-parser');\nshowBranchParser('path/to/show-branch/output.txt', function (err, obj) {\n    console.log(JSON.stringify(obj, null, 4));\n});\n```\n\nThe above code will print the following:\n\n```json\n{\n    \"branches\": [\n        {\n            \"label\": \"origin/master\",\n            \"latestCommit\": \"update calendars on MICIS > REPORTS tab so that the sql queries will include the day specified.  This updates Billing Reports, Subject Enrollment, URSI Stats\"\n        },\n        {\n            \"label\": \"origin/release\",\n            \"latestCommit\": \"update asmt ref to develop from autoq\"\n        },\n        {\n            \"label\": \"origin/develop\",\n            \"latestCommit\": \"update asmt ref to develop from autoq\"\n        }\n    ],\n    \"commits\": [\n        {\n            \"label\": \"12679ba\",\n            \"commitMessage\": \"update asmt ref to develop from autoq\",\n            \"branches\": [\n                false,\n                true,\n                true\n            ]\n        },\n        {\n            \"label\": \"36eb3f4\",\n            \"commitMessage\": \"Merge pull request #90 from MRN-Code/auto_queue\",\n            \"branches\": [\n                false,\n                true,\n                true\n            ]\n        },\n        {\n            \"label\": \"caf7e93\",\n            \"commitMessage\": \"update asmt checksum.  Also, ORDER study list by study names, update wording in a message to user for readability, and remove extra onPageLoad function that was not being called, but if so, would create errors\",\n            \"branches\": [\n                false,\n                true,\n                true\n            ]\n        },\n        {\n            \"label\": \"e5073e4\",\n            \"commitMessage\": \"update error message function names\",\n            \"branches\": [\n                false,\n                true,\n                true\n            ]\n        },\n        {\n            \"label\": \"cf62f75\",\n            \"commitMessage\": \"added check for loginid on subj details\",\n            \"branches\": [\n                false,\n                true,\n                true\n            ]\n        },\n        {\n            \"label\": \"fc5b144\",\n            \"commitMessage\": \"Merge branch 'auto_queue' of github.com:MRN-Code/micis into auto_queue\",\n            \"branches\": [\n                false,\n                true,\n                true\n            ]\n        }\n    ]\n}\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint your code using [Grunt](http://gruntjs.com/).\n\n## TODO\n1. Add unit testing\n2. Differentiate between merge and normal commits\n\n",
  "readmeFilename": "README.md",
  "gitHead": "86d0855ede95be4f3d50fb67958a8c794daea445",
  "_id": "git-show-branch-parser@0.1.1",
  "_shasum": "b1d11e467ec1bf5db5864638ea93b33861c17c0f",
  "_from": "git-show-branch-parser@"
}
